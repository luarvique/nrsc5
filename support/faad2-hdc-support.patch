From 932275694a920ba760cd99025b954d03ce1fe14e Mon Sep 17 00:00:00 2001
From: Clayton Smith <argilo@gmail.com>
Date: Thu, 6 Mar 2025 19:27:26 -0500
Subject: [PATCH] Support for HDC variant

---
 CMakeLists.txt       |  10 +-
 frontend/main.c      |   3 +-
 include/neaacdec.h   |   4 +
 libfaad/bits.c       |   2 +-
 libfaad/bits.h       |   2 +-
 libfaad/common.c     |   5 +
 libfaad/common.h     |   6 ++
 libfaad/decoder.c    |  42 ++++++++
 libfaad/drm_dec.c    | 108 ++++++++++++++++-----
 libfaad/drm_dec.h    |   5 +-
 libfaad/sbr_dec.c    |  10 +-
 libfaad/sbr_dec.h    |   4 +
 libfaad/sbr_syntax.c |  24 ++++-
 libfaad/syntax.c     | 224 +++++++++++++++++++++++++++++++++++++++++--
 libfaad/syntax.h     |   1 +
 15 files changed, 406 insertions(+), 44 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 97b61cc..5956418 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -146,7 +146,7 @@ endif()  # GCC
 file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/include/neaacdec.h
      DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include)
 
-foreach(LIB faad faad_drm faad_fixed faad_drm_fixed)
+foreach(LIB faad faad_drm faad_hdc faad_fixed faad_drm_fixed)
   add_library(${LIB} ${LIBFAAD_SOURCES})
   if(MATH_LIBRARY)
     target_link_libraries(${LIB} PUBLIC ${MATH_LIBRARY})
@@ -171,6 +171,12 @@ target_compile_definitions(${LIB} PRIVATE
 )
 endforeach()
 
+foreach(LIB faad_hdc)
+  target_compile_definitions(${LIB} PRIVATE
+          HDC_SUPPORT
+  )
+endforeach()
+
 foreach(LIB faad_fixed faad_drm_fixed)
 target_compile_definitions(${LIB} PRIVATE
   FIXED_POINT
@@ -271,7 +277,7 @@ if(NOT FAAD_BUNDLED_MODE)
   install(FILES "${CMAKE_CURRENT_BINARY_DIR}/faad2.pc"
     DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 
-  set(INSTALL_TARGETS faad faad_drm)
+  set(INSTALL_TARGETS faad faad_drm faad_hdc)
   if (FAAD_BUILD_CLI)
     list(APPEND INSTALL_TARGETS faad_cli)
   endif()
diff --git a/frontend/main.c b/frontend/main.c
index 895ed18..18aefb7 100644
--- a/frontend/main.c
+++ b/frontend/main.c
@@ -1164,7 +1164,8 @@ static int faad_main(int argc, char *argv[])
                     if ((val != LC) &&
                         (val != MAIN) &&
                         (val != LTP) &&
-                        (val != LD))
+                        (val != LD) &&
+                        (val != HDC_LC))
                     {
                         showHelp = 1;
                     }
diff --git a/include/neaacdec.h b/include/neaacdec.h
index f7d5f67..b4f36da 100644
--- a/include/neaacdec.h
+++ b/include/neaacdec.h
@@ -81,6 +81,7 @@ extern "C" {
 #define ER_LTP    19
 #define LD        23
 #define DRM_ER_LC 27 /* special object type for DRM */
+#define HDC_LC    127 /* non standard type for HDC */
 
 /* header types */
 #define RAW        0
@@ -227,6 +228,9 @@ NEAACDECAPI char NeAACDecInit2(NeAACDecHandle hDecoder,
 NEAACDECAPI char NeAACDecInitDRM(NeAACDecHandle *hDecoder, unsigned long samplerate,
                                  unsigned char channels);
 
+/* Init the library for HDC */
+NEAACDECAPI char NeAACDecInitHDC(NeAACDecHandle *hDecoder, unsigned long *samplerate);
+
 NEAACDECAPI void NeAACDecPostSeekReset(NeAACDecHandle hDecoder, long frame);
 
 NEAACDECAPI void NeAACDecClose(NeAACDecHandle hDecoder);
diff --git a/libfaad/bits.c b/libfaad/bits.c
index 110c9dc..ee37aff 100644
--- a/libfaad/bits.c
+++ b/libfaad/bits.c
@@ -244,7 +244,7 @@ uint8_t *faad_getbitbuffer(bitfile *ld, uint32_t bits
     return buffer;
 }
 
-#ifdef DRM
+#if defined(DRM) || defined(HDC)
 /* return the original data buffer */
 void *faad_origbitbuffer(bitfile *ld)
 {
diff --git a/libfaad/bits.h b/libfaad/bits.h
index c01c54e..44ea3fa 100644
--- a/libfaad/bits.h
+++ b/libfaad/bits.h
@@ -87,7 +87,7 @@ void faad_rewindbits(bitfile *ld);
 void faad_resetbits(bitfile *ld, uint32_t bits);
 uint8_t *faad_getbitbuffer(bitfile *ld, uint32_t bits
                        DEBUGDEC);
-#ifdef DRM
+#if defined(DRM) || defined(HDC)
 void *faad_origbitbuffer(bitfile *ld);
 uint32_t faad_origbitbuffer_size(bitfile *ld);
 #endif
diff --git a/libfaad/common.c b/libfaad/common.c
index 1f4a7d1..70d83a4 100644
--- a/libfaad/common.c
+++ b/libfaad/common.c
@@ -165,6 +165,11 @@ int8_t can_decode_ot(const uint8_t object_type)
 #else
         return -1;
 #endif
+#endif
+
+#ifdef HDC
+    case HDC_LC:
+        return 0;
 #endif
     }
 
diff --git a/libfaad/common.h b/libfaad/common.h
index aba8e90..d6a5c59 100644
--- a/libfaad/common.h
+++ b/libfaad/common.h
@@ -95,6 +95,12 @@ extern "C" {
 #define DRM
 #define DRM_PS
 #endif
+/* Allow decoding of HDC */
+#ifdef HDC_SUPPORT
+#define DRM
+#define DRM_PS
+#define HDC
+#endif
 
 /* LD can't do without LTP */
 #ifdef LD_DEC
diff --git a/libfaad/decoder.c b/libfaad/decoder.c
index de3b169..80897ec 100644
--- a/libfaad/decoder.c
+++ b/libfaad/decoder.c
@@ -350,6 +350,13 @@ long NeAACDecInit(NeAACDecHandle hpDecoder,
     if (!*samplerate)
         return -1;
 
+#ifdef HDC
+    if (hDecoder->config.defObjectType == HDC_LC)
+    {
+        hDecoder->object_type = hDecoder->config.defObjectType;
+    }
+#endif
+
 #if (defined(PS_DEC) || defined(DRM_PS))
     /* check if we have a mono file */
     if (*channels == 1)
@@ -529,6 +536,41 @@ char NeAACDecInitDRM(NeAACDecHandle *hpDecoder,
 }
 #endif
 
+#ifdef HDC
+char NeAACDecInitHDC(NeAACDecHandle *hpDecoder,
+                                 unsigned long *samplerate)
+{
+    NeAACDecStruct** hDecoder = (NeAACDecStruct**)hpDecoder;
+    if (hDecoder == NULL)
+        return 1; /* error */
+
+    NeAACDecClose(*hDecoder);
+
+    *hDecoder = NeAACDecOpen();
+
+    /* Special object type defined for HDC */
+    (*hDecoder)->config.defObjectType = HDC_LC;
+
+    (*hDecoder)->config.defSampleRate = *samplerate;
+#ifdef ERROR_RESILIENCE
+    (*hDecoder)->aacSectionDataResilienceFlag = 0;
+    (*hDecoder)->aacScalefactorDataResilienceFlag = 0;
+    (*hDecoder)->aacSpectralDataResilienceFlag = 0;
+#endif
+    (*hDecoder)->frameLength = 1024;
+    (*hDecoder)->sf_index = get_sr_index((*hDecoder)->config.defSampleRate);
+    (*hDecoder)->object_type = (*hDecoder)->config.defObjectType;
+
+    (*hDecoder)->channelConfiguration = 2;
+
+    *samplerate *= 2;
+    (*hDecoder)->forceUpSampling = 1;
+
+    (*hDecoder)->fb = filter_bank_init((*hDecoder)->frameLength);
+    return 0;
+}
+#endif
+
 void NeAACDecClose(NeAACDecHandle hpDecoder)
 {
     uint8_t i;
diff --git a/libfaad/drm_dec.c b/libfaad/drm_dec.c
index 1a24aca..5cea492 100644
--- a/libfaad/drm_dec.c
+++ b/libfaad/drm_dec.c
@@ -44,6 +44,9 @@
 #define DECAY_CUTOFF         3
 #define DECAY_SLOPE          0.05f
 
+/* macros */
+#define IS_HDC(num_subsamples) ((num_subsamples) == 32)
+
 /* type definitaions */
 typedef const int8_t (*drm_ps_huff_tab)[2];
 
@@ -225,6 +228,30 @@ static const real_t pan_pow_2_30_neg[8][5] = {
     { COEF_CONST(0.969764715), COEF_CONST(0.947691892), COEF_CONST(0.922571949), COEF_CONST(0.898117847), COEF_CONST(0.874311936) }
 };
 
+/* 2^(pan_quant[x][y]/32) */
+static const real_t pan_pow_2_32_pos[8][5] = {
+    { COEF_CONST(1),           COEF_CONST(1),           COEF_CONST(1),           COEF_CONST(1),           COEF_CONST(1)           },
+    { COEF_CONST(1.003604347), COEF_CONST(1.003604347), COEF_CONST(1.007221686), COEF_CONST(1.007221686), COEF_CONST(1.007221686) },
+    { COEF_CONST(1.007221686), COEF_CONST(1.007221686), COEF_CONST(1.014495524), COEF_CONST(1.018152118), COEF_CONST(1.018152118) },
+    { COEF_CONST(1.010852062), COEF_CONST(1.014495524), COEF_CONST(1.021821892), COEF_CONST(1.032910767), COEF_CONST(1.036633736) },
+    { COEF_CONST(1.014495524), COEF_CONST(1.021821892), COEF_CONST(1.032910767), COEF_CONST(1.04788335),  COEF_CONST(1.055448548) },
+    { COEF_CONST(1.018152118), COEF_CONST(1.029201168), COEF_CONST(1.04788335),  COEF_CONST(1.066902341), COEF_CONST(1.078480432) },
+    { COEF_CONST(1.021821892), COEF_CONST(1.040370124), COEF_CONST(1.063070665), COEF_CONST(1.086268878), COEF_CONST(1.105986959) },
+    { COEF_CONST(1.029201168), COEF_CONST(1.051658007), COEF_CONST(1.078480432), COEF_CONST(1.105986959), COEF_CONST(1.134195038) }
+};
+
+/* 2^(-pan_quant[x][y]/32) */
+static const real_t pan_pow_2_32_neg[8][5] = {
+    { COEF_CONST(1),           COEF_CONST(1),           COEF_CONST(1),           COEF_CONST(1),           COEF_CONST(1)           },
+    { COEF_CONST(0.996408597), COEF_CONST(0.996408597), COEF_CONST(0.992830093), COEF_CONST(0.992830093), COEF_CONST(0.992830093) },
+    { COEF_CONST(0.992830093), COEF_CONST(0.992830093), COEF_CONST(0.985711594), COEF_CONST(0.982171507), COEF_CONST(0.982171507) },
+    { COEF_CONST(0.989264441), COEF_CONST(0.985711594), COEF_CONST(0.978644134), COEF_CONST(0.968137841), COEF_CONST(0.964660869) },
+    { COEF_CONST(0.985711594), COEF_CONST(0.978644134), COEF_CONST(0.968137841), COEF_CONST(0.954304695), COEF_CONST(0.947464471) },
+    { COEF_CONST(0.982171507), COEF_CONST(0.971627346), COEF_CONST(0.954304695), COEF_CONST(0.93729291),  COEF_CONST(0.927230546) },
+    { COEF_CONST(0.978644134), COEF_CONST(0.961196383), COEF_CONST(0.940671239), COEF_CONST(0.92058239),  COEF_CONST(0.904169793) },
+    { COEF_CONST(0.971627346), COEF_CONST(0.950879462), COEF_CONST(0.927230546), COEF_CONST(0.904169793), COEF_CONST(0.881682573) }
+};
+
 static const real_t g_decayslope[MAX_SA_BAND] = {
     FRAC_CONST(1),   FRAC_CONST(1),   FRAC_CONST(1),   FRAC_CONST(0.95),FRAC_CONST(0.9), FRAC_CONST(0.85), FRAC_CONST(0.8),
     FRAC_CONST(0.75),FRAC_CONST(0.7), FRAC_CONST(0.65),FRAC_CONST(0.6), FRAC_CONST(0.55),FRAC_CONST(0.5),  FRAC_CONST(0.45),
@@ -635,7 +662,7 @@ static void drm_ps_delta_decode(drm_ps_info *ps)
     }
 }
 
-static void drm_calc_sa_side_signal(drm_ps_info *ps, qmf_t X[38][64])
+static void drm_calc_sa_side_signal(drm_ps_info *ps, qmf_t X[38][64], int num_subsamples)
 {
     uint8_t s, b, k;
     complex_t qfrac, tmp0, tmp, in, R0;
@@ -659,7 +686,7 @@ static void drm_calc_sa_side_signal(drm_ps_info *ps, qmf_t X[38][64])
         RE(Phi_Fract) = RE(Phi_Fract_Qmf[b]);
         IM(Phi_Fract) = IM(Phi_Fract_Qmf[b]);
 
-        for (s = 0; s < NUM_OF_SUBSAMPLES; s++)
+        for (s = 0; s < num_subsamples; s++)
         {
             const real_t gamma = REAL_CONST(1.5);
             const real_t sigma = REAL_CONST(1.5625);
@@ -750,19 +777,21 @@ static void drm_calc_sa_side_signal(drm_ps_info *ps, qmf_t X[38][64])
         ps->delay_buf_index_ser[k] = temp_delay_ser[k];
 }
 
-static void drm_add_ambiance(drm_ps_info *ps, qmf_t X_left[38][64], qmf_t X_right[38][64])
+static void drm_add_ambiance(drm_ps_info *ps, qmf_t X_left[38][64], qmf_t X_right[38][64], int num_subsamples)
 {
-    uint8_t s, b, ifreq, qclass;
+    uint8_t s, b, ifreq, qclass, is_hdc;
     real_t sa_map[MAX_SA_BAND], sa_dir_map[MAX_SA_BAND], k_sa_map[MAX_SA_BAND], k_sa_dir_map[MAX_SA_BAND];
     real_t new_dir_map, new_sa_map;
 
+    is_hdc = IS_HDC(num_subsamples);
+
     if (ps->bs_enable_sa)
     {
         /* Instead of dequantization and mapping, we use an inverse mapping
            to look up all the values we need */
         for (b = 0; b < sa_freq_scale[DRM_NUM_SA_BANDS]; b++)
         {
-            const real_t inv_f_num_of_subsamples = FRAC_CONST(0.03333333333);
+            const real_t inv_f_num_of_subsamples = is_hdc ? FRAC_CONST(0.03125) : FRAC_CONST(0.03333333333);
 
             ifreq = sa_inv_freq[b];
             qclass = (b != 0);
@@ -779,7 +808,7 @@ static void drm_add_ambiance(drm_ps_info *ps, qmf_t X_left[38][64], qmf_t X_righ
 
         }
 
-        for (s = 0; s < NUM_OF_SUBSAMPLES; s++)
+        for (s = 0; s < num_subsamples; s++)
         {
             for (b = 0; b < sa_freq_scale[DRM_NUM_SA_BANDS]; b++)
             {
@@ -799,7 +828,7 @@ static void drm_add_ambiance(drm_ps_info *ps, qmf_t X_left[38][64], qmf_t X_righ
         }
     }
     else {
-        for (s = 0; s < NUM_OF_SUBSAMPLES; s++)
+        for (s = 0; s < num_subsamples; s++)
         {
             for (b = 0; b < NUM_OF_QMF_CHANNELS; b++)
             {
@@ -810,14 +839,16 @@ static void drm_add_ambiance(drm_ps_info *ps, qmf_t X_left[38][64], qmf_t X_righ
     }
 }
 
-static void drm_add_pan(drm_ps_info *ps, qmf_t X_left[38][64], qmf_t X_right[38][64])
+static void drm_add_pan(drm_ps_info *ps, qmf_t X_left[38][64], qmf_t X_right[38][64], int num_subsamples)
 {
-    uint8_t s, b, qclass, ifreq;
+    uint8_t s, b, qclass, ifreq, is_hdc;
     real_t tmp, coeff1, coeff2;
     real_t pan_base[MAX_PAN_BAND];
     real_t pan_delta[MAX_PAN_BAND];
     qmf_t temp_l, temp_r;
 
+    is_hdc = IS_HDC(num_subsamples);
+
     if (ps->bs_enable_pan)
     {
         for (b = 0; b < NUM_OF_QMF_CHANNELS; b++)
@@ -834,31 +865,56 @@ static void drm_add_pan(drm_ps_info *ps, qmf_t X_left[38][64], qmf_t X_right[38]
                 pan_base[b] = pan_pow_2_neg[-ps->g_prev_pan_index[ifreq]][qclass];
             }
 
-            /* 2^((a-b)/30) = 2^(a/30) * 1/(2^(b/30)) */
+            /* 2^((a-b)/32) = 2^(a/32) * 1/(2^(b/32)) if HDC */
+            /* 2^((a-b)/30) = 2^(a/30) * 1/(2^(b/30)) if regular DRM */
             /* a en b can be negative so we may need to inverse parts */
             if (ps->g_pan_index[ifreq] >= 0)
             {
                 if (ps->g_prev_pan_index[ifreq] >= 0)
                 {
-                    pan_delta[b] = MUL_C(pan_pow_2_30_pos[ps->g_pan_index[ifreq]][qclass],
-                                         pan_pow_2_30_neg[ps->g_prev_pan_index[ifreq]][qclass]);
+                    if (is_hdc)
+                    {
+                        pan_delta[b] = MUL_C(pan_pow_2_32_pos[ps->g_pan_index[ifreq]][qclass],
+                                             pan_pow_2_32_neg[ps->g_prev_pan_index[ifreq]][qclass]);
+                    } else {
+                        pan_delta[b] = MUL_C(pan_pow_2_30_pos[ps->g_pan_index[ifreq]][qclass],
+                                             pan_pow_2_30_neg[ps->g_prev_pan_index[ifreq]][qclass]);
+                    }
                 } else {
-                    pan_delta[b] = MUL_C(pan_pow_2_30_pos[ps->g_pan_index[ifreq]][qclass],
-                                         pan_pow_2_30_pos[-ps->g_prev_pan_index[ifreq]][qclass]);
+                    if (is_hdc)
+                    {
+                        pan_delta[b] = MUL_C(pan_pow_2_32_pos[ps->g_pan_index[ifreq]][qclass],
+                                             pan_pow_2_32_pos[-ps->g_prev_pan_index[ifreq]][qclass]);
+                    } else {
+                        pan_delta[b] = MUL_C(pan_pow_2_30_pos[ps->g_pan_index[ifreq]][qclass],
+                                             pan_pow_2_30_pos[-ps->g_prev_pan_index[ifreq]][qclass]);
+                    }
                 }
             } else {
                 if (ps->g_prev_pan_index[ifreq] >= 0)
                 {
-                    pan_delta[b] = MUL_C(pan_pow_2_30_neg[-ps->g_pan_index[ifreq]][qclass],
-                                         pan_pow_2_30_neg[ps->g_prev_pan_index[ifreq]][qclass]);
+                    if (is_hdc)
+                    {
+                        pan_delta[b] = MUL_C(pan_pow_2_32_neg[-ps->g_pan_index[ifreq]][qclass],
+                                             pan_pow_2_32_neg[ps->g_prev_pan_index[ifreq]][qclass]);
+                    } else {
+                        pan_delta[b] = MUL_C(pan_pow_2_30_neg[-ps->g_pan_index[ifreq]][qclass],
+                                             pan_pow_2_30_neg[ps->g_prev_pan_index[ifreq]][qclass]);
+                    }
                 } else {
-                    pan_delta[b] = MUL_C(pan_pow_2_30_neg[-ps->g_pan_index[ifreq]][qclass],
-                                         pan_pow_2_30_pos[-ps->g_prev_pan_index[ifreq]][qclass]);
+                    if (is_hdc)
+                    {
+                        pan_delta[b] = MUL_C(pan_pow_2_32_neg[-ps->g_pan_index[ifreq]][qclass],
+                                             pan_pow_2_32_pos[-ps->g_prev_pan_index[ifreq]][qclass]);
+                    } else {
+                        pan_delta[b] = MUL_C(pan_pow_2_30_neg[-ps->g_pan_index[ifreq]][qclass],
+                                             pan_pow_2_30_pos[-ps->g_prev_pan_index[ifreq]][qclass]);
+                    }
                 }
             }
         }
 
-        for (s = 0; s < NUM_OF_SUBSAMPLES; s++)
+        for (s = 0; s < num_subsamples; s++)
         {
             /* PAN always uses all 64 channels */
             for (b = 0; b < NUM_OF_QMF_CHANNELS; b++)
@@ -901,17 +957,19 @@ void drm_ps_free(drm_ps_info *ps)
 }
 
 /* main DRM PS decoding function */
-uint8_t drm_ps_decode(drm_ps_info *ps, uint8_t guess, qmf_t X_left[38][64], qmf_t X_right[38][64])
+uint8_t drm_ps_decode(drm_ps_info *ps, uint8_t guess, qmf_t X_left[38][64], qmf_t X_right[38][64], uint8_t hdc_sbr)
 {
+    int num_subsamples = hdc_sbr ? NUM_OF_HDC_SUBSAMPLES : NUM_OF_SUBSAMPLES;
+
     if (ps == NULL)
     {
-        memcpy(X_right, X_left, sizeof(qmf_t)*30*64);
+        memcpy(X_right, X_left, sizeof(qmf_t)*num_subsamples*64);
         return 0;
     }
 
     if (!ps->drm_ps_data_available && !guess)
     {
-        memcpy(X_right, X_left, sizeof(qmf_t)*30*64);
+        memcpy(X_right, X_left, sizeof(qmf_t)*num_subsamples*64);
         memset(ps->g_prev_sa_index, 0, sizeof(ps->g_prev_sa_index));
         memset(ps->g_prev_pan_index, 0, sizeof(ps->g_prev_pan_index));
         return 0;
@@ -933,8 +991,8 @@ uint8_t drm_ps_decode(drm_ps_info *ps, uint8_t guess, qmf_t X_left[38][64], qmf_
 
     ps->drm_ps_data_available = 0;
 
-    drm_calc_sa_side_signal(ps, X_left);
-    drm_add_ambiance(ps, X_left, X_right);
+    drm_calc_sa_side_signal(ps, X_left, num_subsamples);
+    drm_add_ambiance(ps, X_left, X_right, num_subsamples);
 
     if (ps->bs_enable_sa)
     {
@@ -948,7 +1006,7 @@ uint8_t drm_ps_decode(drm_ps_info *ps, uint8_t guess, qmf_t X_left[38][64], qmf_
 
     if (ps->bs_enable_pan)
     {
-        drm_add_pan(ps, X_left, X_right);
+        drm_add_pan(ps, X_left, X_right, num_subsamples);
 
         ps->g_last_had_pan = 1;
 
diff --git a/libfaad/drm_dec.h b/libfaad/drm_dec.h
index 62276a9..56a4b3d 100644
--- a/libfaad/drm_dec.h
+++ b/libfaad/drm_dec.h
@@ -43,6 +43,7 @@ extern "C" {
 #define NUM_OF_LINKS             3
 #define NUM_OF_QMF_CHANNELS     64
 #define NUM_OF_SUBSAMPLES       30
+#define NUM_OF_HDC_SUBSAMPLES   32
 #define MAX_SA_BAND             46
 #define MAX_PAN_BAND            64
 #define MAX_DELAY                5
@@ -75,7 +76,7 @@ typedef struct
 
     uint8_t delay_buf_index_ser[NUM_OF_LINKS];
 
-    qmf_t SA[NUM_OF_SUBSAMPLES][MAX_SA_BAND];
+    qmf_t SA[NUM_OF_HDC_SUBSAMPLES][MAX_SA_BAND];
 
     complex_t d_buff[2][MAX_SA_BAND];
     complex_t d2_buff[NUM_OF_LINKS][MAX_DELAY][MAX_SA_BAND];
@@ -91,7 +92,7 @@ uint16_t drm_ps_data(drm_ps_info *ps, bitfile *ld);
 drm_ps_info *drm_ps_init(void);
 void drm_ps_free(drm_ps_info *ps);
 
-uint8_t drm_ps_decode(drm_ps_info *ps, uint8_t guess, qmf_t X_left[38][64], qmf_t X_right[38][64]);
+uint8_t drm_ps_decode(drm_ps_info *ps, uint8_t guess, qmf_t X_left[38][64], qmf_t X_right[38][64], uint8_t hdc_sdr);
 
 #ifdef __cplusplus
 }
diff --git a/libfaad/sbr_dec.c b/libfaad/sbr_dec.c
index d301e66..99463aa 100644
--- a/libfaad/sbr_dec.c
+++ b/libfaad/sbr_dec.c
@@ -656,9 +656,17 @@ uint8_t sbrDecodeSingleFramePS(sbr_info *sbr, real_t *left_channel, real_t *righ
 
     /* perform parametric stereo */
 #ifdef DRM_PS
+#ifdef HDC
+    if (sbr->Is_DRM_SBR || sbr->Is_HDC_SBR)
+#else
     if (sbr->Is_DRM_SBR)
+#endif
     {
-        drm_ps_decode(sbr->drm_ps, (sbr->ret > 0), X_left, X_right);
+#ifdef HDC
+        drm_ps_decode(sbr->drm_ps, (sbr->ret > 0), X_left, X_right, sbr->Is_HDC_SBR);
+#else
+        drm_ps_decode(sbr->drm_ps, (sbr->ret > 0), X_left, X_right, 0);
+#endif
     } else {
 #endif
 #ifdef PS_DEC
diff --git a/libfaad/sbr_dec.h b/libfaad/sbr_dec.h
index 40e53ae..ce85feb 100644
--- a/libfaad/sbr_dec.h
+++ b/libfaad/sbr_dec.h
@@ -176,6 +176,10 @@ typedef struct
     ps_info *ps;
 #endif
 
+#ifdef HDC
+    uint8_t Is_HDC_SBR;
+#endif
+
     uint8_t numTimeSlotsRate;
     uint8_t numTimeSlots;
     uint8_t tHFGen;
diff --git a/libfaad/sbr_syntax.c b/libfaad/sbr_syntax.c
index e27980f..4c2b91c 100644
--- a/libfaad/sbr_syntax.c
+++ b/libfaad/sbr_syntax.c
@@ -153,7 +153,11 @@ uint8_t sbr_extension_data(bitfile *ld, sbr_info *sbr, uint16_t cnt,
 #endif
 
 #ifdef DRM
+#ifdef HDC
+    if (!sbr->Is_DRM_SBR && !sbr->Is_HDC_SBR)
+#else
     if (!sbr->Is_DRM_SBR)
+#endif
 #endif
     {
         uint8_t bs_extension_type = (uint8_t)faad_getbits(ld, 4
@@ -246,7 +250,11 @@ uint8_t sbr_extension_data(bitfile *ld, sbr_info *sbr, uint16_t cnt,
     }
 
 #ifdef DRM
+#ifdef HDC
+    if (!sbr->Is_DRM_SBR && !sbr->Is_HDC_SBR)
+#else
     if (!sbr->Is_DRM_SBR)
+#endif
 #endif
     {
         /* -4 does not apply, bs_extension_type is re-read in this function */
@@ -391,6 +399,12 @@ static uint8_t sbr_single_channel_element(bitfile *ld, sbr_info *sbr)
         faad_get1bit(ld);
     }
 #endif
+#ifdef HDC
+    if (sbr->Is_HDC_SBR)
+    {
+        faad_get1bit(ld);
+    }
+#endif
 
     if ((result = sbr_grid(ld, sbr, 0)) > 0)
         return result;
@@ -888,7 +902,11 @@ static uint16_t sbr_extension(bitfile *ld, sbr_info *sbr,
 #ifdef DRM_PS
     case DRM_PARAMETRIC_STEREO:
         /* If not expected then only decode but do not expose. */
+#ifdef HDC
+        if (sbr->Is_DRM_SBR || sbr->Is_HDC_SBR)
+#else
         if (sbr->Is_DRM_SBR)
+#endif
         {
             sbr->ps_used = 1;
         }
@@ -899,9 +917,9 @@ static uint16_t sbr_extension(bitfile *ld, sbr_info *sbr,
         return drm_ps_data(sbr->drm_ps, ld);
 #endif
     default:
-        sbr->bs_extension_data = (uint8_t)faad_getbits(ld, 6
-            DEBUGVAR(1,279,"sbr_single_channel_element(): bs_extension_data"));
-        return 6;
+        sbr->bs_extension_data = (uint8_t)faad_getbits(ld, num_bits_left
+             DEBUGVAR(1,279,"sbr_single_channel_element(): bs_extension_data"));
+        return num_bits_left;
     }
 }
 
diff --git a/libfaad/syntax.c b/libfaad/syntax.c
index 56ae310..987264c 100644
--- a/libfaad/syntax.c
+++ b/libfaad/syntax.c
@@ -86,7 +86,7 @@ static void gain_control_data(bitfile *ld, ic_stream *ics);
 static uint8_t spectral_data(NeAACDecStruct *hDecoder, ic_stream *ics, bitfile *ld,
                              int16_t *spectral_data);
 static uint8_t pulse_data(ic_stream *ics, pulse_info *pul, bitfile *ld);
-static void tns_data(ic_stream *ics, tns_info *tns, bitfile *ld);
+static void tns_data(NeAACDecStruct *hDecoder, ic_stream *ics, tns_info *tns, bitfile *ld);
 #ifdef LTP_DEC
 static uint8_t ltp_data(NeAACDecStruct *hDecoder, ic_stream *ics, ltp_info *ltp, bitfile *ld);
 #endif
@@ -446,6 +446,102 @@ static void decode_cpe(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *hInfo, bitfi
     hDecoder->fr_ch_ele++;
 }
 
+#ifdef HDC
+static void hdc_data_block(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *hInfo,
+                           bitfile *ld, program_config *pce, drc_info *drc)
+{
+    uint8_t i, n;
+
+    hDecoder->fr_channels = 0;
+    hDecoder->fr_ch_ele = 0;
+    hDecoder->first_syn_ele = 25;
+    hDecoder->has_lfe = 0;
+
+    n = (uint8_t)faad_getbits(ld, LEN_SE_ID);
+    switch (n) {
+    case 0:
+        decode_sce_lfe(hDecoder, hInfo, ld, ID_SCE);
+        // FIXME ignore data afterwards, why?
+        return;
+    case 1:
+        decode_sce_lfe(hDecoder, hInfo, ld, ID_SCE);
+        break;
+    case 2:
+        decode_cpe(hDecoder, hInfo, ld, ID_CPE);
+        break;
+    case 5:
+    case 6:
+        decode_sce_lfe(hDecoder, hInfo, ld, ID_SCE);
+        break;
+    case 7:
+        decode_cpe(hDecoder, hInfo, ld, ID_CPE);
+        break;
+    default:
+        fprintf(stderr, "Unknown HDC block type: %d\n", n);
+        break;
+    }
+
+    if (hInfo->error > 0)
+        return;
+
+    // XXX immediately followed by SBR data, which was handled in decode_*
+
+    // NB we expect errors until we hit a valid first SBR block
+    if (hDecoder->sbr[0]->ret)
+        return;
+
+    while (faad_get_processed_bits(ld) + 8 <= faad_origbitbuffer_size(ld)*8)
+    {
+        n = (uint8_t)faad_getbits(ld, LEN_SE_ID);
+        if (n != ID_FIL)
+        {
+            fprintf(stderr, "Unexpected block type: %d, expected %d\n", n, ID_FIL);
+            break;
+        }
+
+        fill_element(hDecoder, ld, drc, 0);
+    }
+    return;
+}
+
+static uint8_t hdc_sbr_data_block(NeAACDecStruct *hDecoder, bitfile *ld)
+{
+    uint16_t count;
+    uint32_t bitsconsumed = faad_get_processed_bits(ld);
+    uint32_t buffer_size = faad_origbitbuffer_size(ld);
+
+    if (bitsconsumed > buffer_size*8)
+    {
+        return 14;
+    }
+
+    if (!hDecoder->sbr[0])
+    {
+        hDecoder->sbr[0] = sbrDecodeInit(hDecoder->frameLength,
+            hDecoder->element_id[0], 2*get_sample_rate(hDecoder->sf_index),
+            hDecoder->downSampledSBR
+#ifdef DRM
+            , 0
+#endif
+
+            );
+        hDecoder->sbr[0]->Is_HDC_SBR = 1;
+    }
+
+    count = (uint16_t)bit2byte(buffer_size*8 - bitsconsumed);
+
+    hDecoder->sbr[0]->ret = sbr_extension_data(ld, hDecoder->sbr[0], count, hDecoder->postSeekResetFlag);
+#if (defined(PS_DEC) || defined(DRM_PS))
+    if (hDecoder->sbr[0]->ps_used)
+    {
+        hDecoder->ps_used[0] = 1;
+        hDecoder->ps_used_global = 1;
+    }
+#endif
+    return 0;
+}
+#endif
+
 void raw_data_block(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *hInfo,
                     bitfile *ld, program_config *pce, drc_info *drc)
 {
@@ -457,6 +553,14 @@ void raw_data_block(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *hInfo,
     hDecoder->first_syn_ele = 25;
     hDecoder->has_lfe = 0;
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC)
+    {
+        hdc_data_block(hDecoder, hInfo, ld, pce, drc);
+        return;
+    }
+#endif
+
 #ifdef ERROR_RESILIENCE
     if (hDecoder->object_type < ER_OBJECT_START)
     {
@@ -657,13 +761,33 @@ static uint8_t single_lfe_channel_element(NeAACDecStruct *hDecoder, bitfile *ld,
     ic_stream *ics = &(sce.ics1);
     ALIGN int16_t spec_data[1024] = {0};
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC) {
+        sce.element_instance_tag = 0;
+    } else {
+#endif
     sce.element_instance_tag = (uint8_t)faad_getbits(ld, LEN_TAG
         DEBUGVAR(1,38,"single_lfe_channel_element(): element_instance_tag"));
+#ifdef HDC
+    }
+#endif
 
     *tag = sce.element_instance_tag;
     sce.channel = channel;
     sce.paired_channel = -1;
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC)
+    {
+        if ((retval = ics_info(hDecoder, ics, ld, 0)) > 0)
+            return retval;
+
+        /* get tns data */
+        if ((ics->tns_data_present = faad_get1bit(ld)) & 1)
+            tns_data(hDecoder, ics, &(ics->tns), ld);
+    }
+#endif
+
     retval = individual_channel_stream(hDecoder, &sce, ld, ics, 0, spec_data);
     if (retval > 0)
         return retval;
@@ -679,6 +803,17 @@ static uint8_t single_lfe_channel_element(NeAACDecStruct *hDecoder, bitfile *ld,
     {
         faad_flushbits(ld, LEN_SE_ID);
 
+#ifdef HDC
+        if (hDecoder->object_type == HDC_LC)
+        {
+            if (faad_getbits(ld, 1) && (retval = hdc_sbr_data_block(hDecoder, ld)) > 0)
+            {
+                return retval;
+            }
+        }
+        else
+#endif
+
         /* one sbr_info describes a channel_element not a channel! */
         if ((retval = fill_element(hDecoder, ld, hDecoder->drc, hDecoder->fr_ch_ele)) > 0)
         {
@@ -709,12 +844,27 @@ static uint8_t channel_pair_element(NeAACDecStruct *hDecoder, bitfile *ld,
     cpe.channel        = channels;
     cpe.paired_channel = channels+1;
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC) {
+        cpe.element_instance_tag = 0;
+    } else {
+#endif
     cpe.element_instance_tag = (uint8_t)faad_getbits(ld, LEN_TAG
         DEBUGVAR(1,39,"channel_pair_element(): element_instance_tag"));
+#ifdef HDC
+    }
+#endif
     *tag = cpe.element_instance_tag;
 
-    if ((cpe.common_window = faad_get1bit(ld
-        DEBUGVAR(1,40,"channel_pair_element(): common_window"))) & 1)
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC)
+        cpe.common_window = 1;
+    else
+#endif
+    cpe.common_window = faad_get1bit(ld
+        DEBUGVAR(1,40,"channel_pair_element(): common_window"));
+
+    if (cpe.common_window & 1)
     {
         /* both channels have common ics information */
         if ((result = ics_info(hDecoder, ics1, ld, cpe.common_window)) > 0)
@@ -766,6 +916,18 @@ static uint8_t channel_pair_element(NeAACDecStruct *hDecoder, bitfile *ld,
         ics1->ms_mask_present = 0;
     }
 
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC)
+    {
+        /* get tns data */
+        if ((ics1->tns_data_present = faad_get1bit(ld)) & 1)
+            tns_data(hDecoder, ics1, &(ics1->tns), ld);
+        /* get tns data */
+        if ((ics2->tns_data_present = faad_get1bit(ld)) & 1)
+            tns_data(hDecoder, ics2, &(ics2->tns), ld);
+    }
+#endif
+
     if ((result = individual_channel_stream(hDecoder, &cpe, ld, ics1,
         0, spec_data1)) > 0)
     {
@@ -807,6 +969,16 @@ static uint8_t channel_pair_element(NeAACDecStruct *hDecoder, bitfile *ld,
     {
         faad_flushbits(ld, LEN_SE_ID);
 
+#ifdef HDC
+        if (hDecoder->object_type == HDC_LC)
+        {
+            if (faad_getbits(ld, 1) && (result = hdc_sbr_data_block(hDecoder, ld)) > 0)
+            {
+                return result;
+            }
+        }
+        else
+#endif
         /* one sbr_info describes a channel_element not a channel! */
         if ((result = fill_element(hDecoder, ld, hDecoder->drc, hDecoder->fr_ch_ele)) > 0)
         {
@@ -836,10 +1008,21 @@ static uint8_t ics_info(NeAACDecStruct *hDecoder, ic_stream *ics, bitfile *ld,
         DEBUGVAR(1,43,"ics_info(): ics_reserved_bit"));
     if (ics_reserved_bit != 0)
         return 32;
+#ifdef HDC
+    if (hDecoder->object_type == HDC_LC) {
+        ics->window_shape = faad_get1bit(ld
+            DEBUGVAR(1,45,"ics_info(): window_shape"));
+        ics->window_sequence = (uint8_t)faad_getbits(ld, 2
+            DEBUGVAR(1,44,"ics_info(): window_sequence"));
+    } else {
+#endif
     ics->window_sequence = (uint8_t)faad_getbits(ld, 2
         DEBUGVAR(1,44,"ics_info(): window_sequence"));
     ics->window_shape = faad_get1bit(ld
         DEBUGVAR(1,45,"ics_info(): window_shape"));
+#ifdef HDC
+    }
+#endif
 
 #ifdef LD_DEC
     /* No block switching in LD */
@@ -868,6 +1051,9 @@ static uint8_t ics_info(NeAACDecStruct *hDecoder, ic_stream *ics, bitfile *ld,
     if (ics->max_sfb > ics->num_swb)
         return 16;
 
+#ifdef HDC
+    if (hDecoder->object_type != HDC_LC)
+#endif
     if (ics->window_sequence != EIGHT_SHORT_SEQUENCE)
     {
         if ((ics->predictor_data_present = faad_get1bit(ld
@@ -1172,6 +1358,14 @@ static uint8_t fill_element(NeAACDecStruct *hDecoder, bitfile *ld, drc_info *drc
                 hDecoder->ps_used_global = 1;
             }
 #endif
+        } else if (bs_extension_type == 0) {
+            // padding
+            int i;
+            for (i = 0; i < count; i++)
+            {
+                if ((uint8_t)faad_getbits(ld, 8) != 0)
+                    fprintf(stderr, "sbr_extension_data: zero fil data not zero\n");
+            }
         } else {
 #endif
 #ifndef DRM
@@ -1362,12 +1556,12 @@ void DRM_aac_scalable_main_element(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *
     }
     /* Stereo4 / Mono2 */
     if (ics1->tns_data_present)
-        tns_data(ics1, &(ics1->tns), ld);
+        tns_data(hDecoder, ics1, &(ics1->tns), ld);
     if (this_layer_stereo)
     {
         /* Stereo5 */
         if (ics2->tns_data_present)
-            tns_data(ics2, &(ics2->tns), ld);
+            tns_data(hDecoder, ics1, &(ics1->tns), ld);
     }
 
 #ifdef DRM
@@ -1583,6 +1777,9 @@ static uint8_t side_info(NeAACDecStruct *hDecoder, element *ele,
     ics->global_gain = (uint8_t)faad_getbits(ld, 8
         DEBUGVAR(1,67,"individual_channel_stream(): global_gain"));
 
+#ifdef HDC
+    if (hDecoder->object_type != HDC_LC)
+#endif
     if (!ele->common_window && !scal_flag)
     {
         if ((result = ics_info(hDecoder, ics, ld, ele->common_window)) > 0)
@@ -1595,6 +1792,9 @@ static uint8_t side_info(NeAACDecStruct *hDecoder, element *ele,
     if ((result = scale_factor_data(hDecoder, ics, ld)) > 0)
         return result;
 
+#ifdef HDC
+    if (hDecoder->object_type != HDC_LC)
+#endif
     if (!scal_flag)
     {
         /**
@@ -1617,7 +1817,7 @@ static uint8_t side_info(NeAACDecStruct *hDecoder, element *ele,
 #ifdef ERROR_RESILIENCE
             if (hDecoder->object_type < ER_OBJECT_START)
 #endif
-                tns_data(ics, &(ics->tns), ld);
+                tns_data(hDecoder, ics, &(ics->tns), ld);
         }
 
         /* get gain control data */
@@ -1678,10 +1878,13 @@ static uint8_t individual_channel_stream(NeAACDecStruct *hDecoder, element *ele,
     if (result > 0)
         return result;
 
+#ifdef HDC
+    if (hDecoder->object_type != HDC_LC)
+#endif
     if (hDecoder->object_type >= ER_OBJECT_START)
     {
         if (ics->tns_data_present)
-            tns_data(ics, &(ics->tns), ld);
+            tns_data(hDecoder, ics, &(ics->tns), ld);
     }
 
 #ifdef DRM
@@ -2016,7 +2219,7 @@ static uint8_t scale_factor_data(NeAACDecStruct *hDecoder, ic_stream *ics, bitfi
 }
 
 /* Table 4.4.27 */
-static void tns_data(ic_stream *ics, tns_info *tns, bitfile *ld)
+static void tns_data(NeAACDecStruct *hDecoder, ic_stream *ics, tns_info *tns, bitfile *ld)
 {
     uint8_t w, filt, i, coef_bits;
     uint8_t n_filt_bits = 2;
@@ -2033,6 +2236,11 @@ static void tns_data(ic_stream *ics, tns_info *tns, bitfile *ld)
     for (w = 0; w < ics->num_windows; w++)
     {
         uint8_t start_coef_bits = 3;
+#ifdef HDC
+        if (hDecoder->object_type == HDC_LC && ics->window_sequence != EIGHT_SHORT_SEQUENCE)
+            tns->n_filt[w] = 1;
+        else
+#endif
         tns->n_filt[w] = (uint8_t)faad_getbits(ld, n_filt_bits
             DEBUGVAR(1,74,"tns_data(): n_filt"));
 #if 0
diff --git a/libfaad/syntax.h b/libfaad/syntax.h
index b6311ed..cabe1d3 100644
--- a/libfaad/syntax.h
+++ b/libfaad/syntax.h
@@ -46,6 +46,7 @@ extern "C" {
 #define ER_LC     17
 #define ER_LTP    19
 #define DRM_ER_LC 27 /* special object type for DRM */
+#define HDC_LC    127 /* special object type for HDC */
 
 /* header types */
 #define RAW        0
-- 
2.43.0

